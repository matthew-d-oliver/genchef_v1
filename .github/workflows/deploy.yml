name: Deploy to EC2

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      env:
        SECRET_KEY: 'test-secret-key-for-github-actions'
        DEBUG: 'True'
        DB_NAME: 'test_db'
        DB_USER: 'postgres'
        DB_PASSWORD: 'postgres'
        DB_HOST: 'localhost'
        DB_PORT: '5432'
        USE_SQLITE: 'False'
        USE_S3: 'False'
      run: |
        python manage.py test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_S3_REGION_NAME }}
    
    - name: Deploy to EC2 via Systems Manager
      run: |
        echo "Starting deployment to EC2..."
        
        COMMAND_ID=$(aws ssm send-command \
          --instance-ids ${{ secrets.INSTANCE_ID }} \
          --document-name "AWS-RunShellScript" \
          --parameters 'commands=[
            "echo \"Starting deployment process...\"",
            "export HOME=/home/ubuntu",
            "cd /home/ubuntu",
            "if [ ! -d \"genchef_v1\" ]; then git clone https://github.com/matthew-d-oliver/genchef_v1.git genchef_v1; fi",
            "sudo chown -R ubuntu:ubuntu /home/ubuntu/genchef_v1",
            "git config --global --add safe.directory /home/ubuntu/genchef_v1",
            "cd /home/ubuntu/genchef_v1",
            "git pull origin main",
            "echo \"Creating .env file...\"",
            "cat > .env << EOF",
            "SECRET_KEY=${{ secrets.SECRET_KEY }}",
            "DB_PASSWORD=${{ secrets.DB_PASSWORD }}",
            "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}",
            "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}",
            "AWS_STORAGE_BUCKET_NAME=${{ secrets.AWS_STORAGE_BUCKET_NAME }}",
            "AWS_S3_REGION_NAME=${{ secrets.AWS_S3_REGION_NAME }}",
            "EOF",
            "docker-compose down || true",
            "docker-compose build --no-cache",
            "docker-compose up -d",
            "echo \"Creating nginx config...\"",
            "sudo tee /etc/nginx/sites-available/django > /dev/null << EOF",
            "server {",
            "    listen 80;",
            "    server_name _;",
            "    client_max_body_size 100M;",
            "    location / {",
            "        proxy_pass http://localhost:8080;",
            "        proxy_set_header Host \\$host;",
            "        proxy_set_header X-Real-IP \\$remote_addr;",
            "        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;",
            "        proxy_set_header X-Forwarded-Proto \\$scheme;",
            "    }",
            "}",
            "EOF",
            "sudo rm -f /etc/nginx/sites-enabled/default",
            "sudo ln -sf /etc/nginx/sites-available/django /etc/nginx/sites-enabled/",
            "sudo nginx -t",
            "sudo systemctl reload nginx",
            "echo \"Waiting for services to start...\"",
            "sleep 30",
            "docker-compose ps",
            "curl -I http://localhost/ || echo \"Nginx proxy not responding\"",
            "echo \"Deployment completed successfully!\""
          ]' \
          --query 'Command.CommandId' \
          --output text)
        
        echo "Command ID: $COMMAND_ID"
        echo "Waiting for command to complete..."
        
        # Wait for command to complete (timeout after 5 minutes)
        aws ssm wait command-executed \
          --command-id $COMMAND_ID \
          --instance-id ${{ secrets.INSTANCE_ID }} \
          --cli-read-timeout 300
        
        # Get command results
        echo "Getting command results..."
        STATUS=$(aws ssm get-command-invocation \
          --command-id $COMMAND_ID \
          --instance-id ${{ secrets.INSTANCE_ID }} \
          --query 'Status' \
          --output text)
        
        echo "Command Status: $STATUS"
        
        # Display output
        echo "=== Command Output ==="
        aws ssm get-command-invocation \
          --command-id $COMMAND_ID \
          --instance-id ${{ secrets.INSTANCE_ID }} \
          --query 'StandardOutputContent' \
          --output text
        
        # Display errors if any
        ERRORS=$(aws ssm get-command-invocation \
          --command-id $COMMAND_ID \
          --instance-id ${{ secrets.INSTANCE_ID }} \
          --query 'StandardErrorContent' \
          --output text)
        
        if [ "$ERRORS" != "None" ] && [ "$ERRORS" != "" ]; then
          echo "=== Command Errors ==="
          echo "$ERRORS"
        fi
        
        # Fail the job if command failed
        if [ "$STATUS" != "Success" ]; then
          echo "Deployment failed with status: $STATUS"
          exit 1
        fi
        
        echo "Deployment completed successfully!"

  # sync-s3:
  #   needs: deploy
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
  #   steps:
  #   - uses: actions/checkout@v3
    
  #   - name: Configure AWS credentials
  #     uses: aws-actions/configure-aws-credentials@v2
  #     with:
  #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       aws-region: ${{ secrets.AWS_S3_REGION_NAME }}
    
  #   - name: Set up Python
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: '3.12'
    
  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install -r requirements.txt
    
  #   - name: Collect static files to S3
  #     env:
  #       SECRET_KEY: ${{ secrets.SECRET_KEY }}
  #       USE_S3: 'True'
  #       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       AWS_STORAGE_BUCKET_NAME: ${{ secrets.AWS_STORAGE_BUCKET_NAME }}
  #       AWS_S3_REGION_NAME: ${{ secrets.AWS_S3_REGION_NAME }}
  #     run: |
  #       echo "Syncing static files to S3..."
  #       python manage.py collectstatic --noinput
  #       echo "Static files synced successfully!"