n:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      env:
        SECRET_KEY: 'test-secret-key-for-github-actions'
        DEBUG: 'True'
        DB_NAME: 'test_db'
        DB_USER: 'postgres'
        DB_PASSWORD: 'postgres'
        DB_HOST: 'localhost'
        DB_PORT: '5432'
        USE_SQLITE: 'False'
        USE_S3: 'False'
      run: |
        python manage.py test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.PRIVATE_KEY }}
        port: ${{ secrets.PORT }}
        script: |
          # Navigate to your app directory
          cd /home/ubuntu/genchef_v1
          
          # Backup .env file (preserve environment variables)
          cp .env .env.backup
          
          # Pull latest changes
          git pull origin main
          
          # Restore .env file (in case git pull overwrote it)
          cp .env.backup .env
          
          # Activate virtual environment
          source venv/bin/activate
          
          # Install/update dependencies
          pip install -r requirements.txt
          
          # Run migrations
          python manage.py migrate
          
          # Collect static files (will upload to S3)
          python manage.py collectstatic --noinput
          
          # Restart the application
          sudo systemctl restart gunicorn
          sudo systemctl restart nginx
          
          # Clean up backup
          rm .env.backup